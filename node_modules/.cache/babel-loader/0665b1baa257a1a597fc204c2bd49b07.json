{"ast":null,"code":"import \"antd/es/input-number/style\";\nimport _InputNumber from \"antd/es/input-number\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport React from 'react';\n/**\n * 数字组件\n *\n * @param FieldDigitProps {\n *     text: number;\n *     moneySymbol?: string; }\n */\n\nvar FieldDigit = function FieldDigit(_ref, ref) {\n  var text = _ref.text,\n      type = _ref.mode,\n      render = _ref.render,\n      placeholder = _ref.placeholder,\n      renderFormItem = _ref.renderFormItem,\n      fieldProps = _ref.fieldProps;\n\n  if (type === 'read') {\n    var _fieldProps$formatter;\n\n    var digit = new Intl.NumberFormat(undefined, _objectSpread({\n      minimumSignificantDigits: 2\n    }, (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.intlProps) || {})).format(Number(text));\n    var dom = /*#__PURE__*/React.createElement(\"span\", {\n      ref: ref\n    }, (fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$formatter = fieldProps.formatter) === null || _fieldProps$formatter === void 0 ? void 0 : _fieldProps$formatter.call(fieldProps, digit)) || digit);\n\n    if (render) {\n      return render(text, _objectSpread({\n        mode: type\n      }, fieldProps), dom);\n    }\n\n    return dom;\n  }\n\n  if (type === 'edit' || type === 'update') {\n    var _dom = /*#__PURE__*/React.createElement(_InputNumber, _extends({\n      ref: ref,\n      min: 0,\n      placeholder: placeholder\n    }, fieldProps));\n\n    if (renderFormItem) {\n      return renderFormItem(text, _objectSpread({\n        mode: type\n      }, fieldProps), _dom);\n    }\n\n    return _dom;\n  }\n\n  return null;\n};\n\nexport default /*#__PURE__*/React.forwardRef(FieldDigit);","map":{"version":3,"sources":["C:/web/my-app/node_modules/@ant-design/pro-field/es/components/Digit/index.js"],"names":["_InputNumber","_extends","_objectSpread","React","FieldDigit","_ref","ref","text","type","mode","render","placeholder","renderFormItem","fieldProps","_fieldProps$formatter","digit","Intl","NumberFormat","undefined","minimumSignificantDigits","intlProps","format","Number","dom","createElement","formatter","call","_dom","min","forwardRef"],"mappings":"AAAA,OAAO,4BAAP;AACA,OAAOA,YAAP,MAAyB,sBAAzB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,GAA1B,EAA+B;AAC9C,MAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;AAAA,MACIC,IAAI,GAAGH,IAAI,CAACI,IADhB;AAAA,MAEIC,MAAM,GAAGL,IAAI,CAACK,MAFlB;AAAA,MAGIC,WAAW,GAAGN,IAAI,CAACM,WAHvB;AAAA,MAIIC,cAAc,GAAGP,IAAI,CAACO,cAJ1B;AAAA,MAKIC,UAAU,GAAGR,IAAI,CAACQ,UALtB;;AAOA,MAAIL,IAAI,KAAK,MAAb,EAAqB;AACnB,QAAIM,qBAAJ;;AAEA,QAAIC,KAAK,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsBC,SAAtB,EAAiChB,aAAa,CAAC;AACzDiB,MAAAA,wBAAwB,EAAE;AAD+B,KAAD,EAEvD,CAACN,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACO,SAApE,KAAkF,EAF3B,CAA9C,EAE8EC,MAF9E,CAEqFC,MAAM,CAACf,IAAD,CAF3F,CAAZ;AAGA,QAAIgB,GAAG,GAAG,aAAapB,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AACjDlB,MAAAA,GAAG,EAAEA;AAD4C,KAA5B,EAEpB,CAACO,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwD,CAACC,qBAAqB,GAAGD,UAAU,CAACY,SAApC,MAAmD,IAAnD,IAA2DX,qBAAqB,KAAK,KAAK,CAA1F,GAA8F,KAAK,CAAnG,GAAuGA,qBAAqB,CAACY,IAAtB,CAA2Bb,UAA3B,EAAuCE,KAAvC,CAAhK,KAAkNA,KAF9L,CAAvB;;AAIA,QAAIL,MAAJ,EAAY;AACV,aAAOA,MAAM,CAACH,IAAD,EAAOL,aAAa,CAAC;AAChCO,QAAAA,IAAI,EAAED;AAD0B,OAAD,EAE9BK,UAF8B,CAApB,EAEGU,GAFH,CAAb;AAGD;;AAED,WAAOA,GAAP;AACD;;AAED,MAAIf,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,QAAhC,EAA0C;AACxC,QAAImB,IAAI,GAAG,aAAaxB,KAAK,CAACqB,aAAN,CAAoBxB,YAApB,EAAkCC,QAAQ,CAAC;AACjEK,MAAAA,GAAG,EAAEA,GAD4D;AAEjEsB,MAAAA,GAAG,EAAE,CAF4D;AAGjEjB,MAAAA,WAAW,EAAEA;AAHoD,KAAD,EAI/DE,UAJ+D,CAA1C,CAAxB;;AAMA,QAAID,cAAJ,EAAoB;AAClB,aAAOA,cAAc,CAACL,IAAD,EAAOL,aAAa,CAAC;AACxCO,QAAAA,IAAI,EAAED;AADkC,OAAD,EAEtCK,UAFsC,CAApB,EAELc,IAFK,CAArB;AAGD;;AAED,WAAOA,IAAP;AACD;;AAED,SAAO,IAAP;AACD,CA5CD;;AA8CA,eAAe,aAAaxB,KAAK,CAAC0B,UAAN,CAAiBzB,UAAjB,CAA5B","sourcesContent":["import \"antd/es/input-number/style\";\nimport _InputNumber from \"antd/es/input-number\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport React from 'react';\n\n/**\n * 数字组件\n *\n * @param FieldDigitProps {\n *     text: number;\n *     moneySymbol?: string; }\n */\nvar FieldDigit = function FieldDigit(_ref, ref) {\n  var text = _ref.text,\n      type = _ref.mode,\n      render = _ref.render,\n      placeholder = _ref.placeholder,\n      renderFormItem = _ref.renderFormItem,\n      fieldProps = _ref.fieldProps;\n\n  if (type === 'read') {\n    var _fieldProps$formatter;\n\n    var digit = new Intl.NumberFormat(undefined, _objectSpread({\n      minimumSignificantDigits: 2\n    }, (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.intlProps) || {})).format(Number(text));\n    var dom = /*#__PURE__*/React.createElement(\"span\", {\n      ref: ref\n    }, (fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$formatter = fieldProps.formatter) === null || _fieldProps$formatter === void 0 ? void 0 : _fieldProps$formatter.call(fieldProps, digit)) || digit);\n\n    if (render) {\n      return render(text, _objectSpread({\n        mode: type\n      }, fieldProps), dom);\n    }\n\n    return dom;\n  }\n\n  if (type === 'edit' || type === 'update') {\n    var _dom = /*#__PURE__*/React.createElement(_InputNumber, _extends({\n      ref: ref,\n      min: 0,\n      placeholder: placeholder\n    }, fieldProps));\n\n    if (renderFormItem) {\n      return renderFormItem(text, _objectSpread({\n        mode: type\n      }, fieldProps), _dom);\n    }\n\n    return _dom;\n  }\n\n  return null;\n};\n\nexport default /*#__PURE__*/React.forwardRef(FieldDigit);"]},"metadata":{},"sourceType":"module"}