"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormItemProvide = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _List = require("../List");

var _FieldContext = _interopRequireDefault(require("../../FieldContext"));

var _proUtils = require("@ant-design/pro-utils");

var _LightWrapper = _interopRequireDefault(require("../../BaseForm/LightWrapper"));

var _excluded = ["children", "value", "onChange", "onBlur", "ignoreFormItem", "valuePropName"],
    _excluded2 = ["children", "addonAfter", "addonBefore"],
    _excluded3 = ["valueType", "transform", "dataFormat", "ignoreFormItem", "lightProps"];

var FormItemProvide = /*#__PURE__*/_react.default.createContext({});
/**
 * 把value扔给 fieldProps，方便给自定义用
 *
 * @param param0
 * @returns
 */


exports.FormItemProvide = FormItemProvide;

var WithValueFomFiledProps = function WithValueFomFiledProps(formFieldProps) {
  var filedChildren = formFieldProps.children,
      value = formFieldProps.value,
      _onChange = formFieldProps.onChange,
      _onBlur = formFieldProps.onBlur,
      ignoreFormItem = formFieldProps.ignoreFormItem,
      _formFieldProps$value = formFieldProps.valuePropName,
      valuePropName = _formFieldProps$value === void 0 ? 'value' : _formFieldProps$value,
      restProps = (0, _objectWithoutProperties2.default)(formFieldProps, _excluded);
  var fieldProps = (0, _react.useMemo)(function () {
    var _filedChildren$type, _filedChildren$props;

    // @ts-ignore
    if ((filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$type = filedChildren.type) === null || _filedChildren$type === void 0 ? void 0 : _filedChildren$type.displayName) !== 'ProFormComponent') return undefined;
    if (! /*#__PURE__*/_react.default.isValidElement(filedChildren)) return undefined;
    return (0, _proUtils.omitUndefined)((0, _objectSpread3.default)((0, _objectSpread3.default)((0, _defineProperty2.default)({
      id: restProps.id
    }, valuePropName, formFieldProps[valuePropName]), (filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props = filedChildren.props) === null || _filedChildren$props === void 0 ? void 0 : _filedChildren$props.fieldProps) || {}), {}, {
      onBlur: function onBlur() {
        var _filedChildren$props2, _filedChildren$props3, _filedChildren$props4, _filedChildren$props5, _filedChildren$props6;

        for (var _len = arguments.length, restParams = new Array(_len), _key = 0; _key < _len; _key++) {
          restParams[_key] = arguments[_key];
        }

        _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur.apply(void 0, restParams);
        filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props2 = filedChildren.props) === null || _filedChildren$props2 === void 0 ? void 0 : (_filedChildren$props3 = _filedChildren$props2.onBlur) === null || _filedChildren$props3 === void 0 ? void 0 : _filedChildren$props3.call.apply(_filedChildren$props3, [_filedChildren$props2].concat(restParams));
        filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props4 = filedChildren.props) === null || _filedChildren$props4 === void 0 ? void 0 : (_filedChildren$props5 = _filedChildren$props4.fieldProps) === null || _filedChildren$props5 === void 0 ? void 0 : (_filedChildren$props6 = _filedChildren$props5.onBlur) === null || _filedChildren$props6 === void 0 ? void 0 : _filedChildren$props6.call.apply(_filedChildren$props6, [_filedChildren$props5].concat(restParams));
      },
      // 这个 onChange 是 Form.Item 添加上的，
      // 要通过 fieldProps 透传给 ProField 调用
      onChange: function onChange() {
        var _filedChildren$props7, _filedChildren$props8, _filedChildren$props9, _filedChildren$props10, _filedChildren$props11;

        for (var _len2 = arguments.length, restParams = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          restParams[_key2] = arguments[_key2];
        }

        _onChange === null || _onChange === void 0 ? void 0 : _onChange.apply(void 0, restParams);
        filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props7 = filedChildren.props) === null || _filedChildren$props7 === void 0 ? void 0 : (_filedChildren$props8 = _filedChildren$props7.onChange) === null || _filedChildren$props8 === void 0 ? void 0 : _filedChildren$props8.call.apply(_filedChildren$props8, [_filedChildren$props7].concat(restParams));
        filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props9 = filedChildren.props) === null || _filedChildren$props9 === void 0 ? void 0 : (_filedChildren$props10 = _filedChildren$props9.fieldProps) === null || _filedChildren$props10 === void 0 ? void 0 : (_filedChildren$props11 = _filedChildren$props10.onChange) === null || _filedChildren$props11 === void 0 ? void 0 : _filedChildren$props11.call.apply(_filedChildren$props11, [_filedChildren$props10].concat(restParams));
      }
    }));
  }, [filedChildren, formFieldProps, _onBlur, _onChange, restProps.id, valuePropName]);
  if (! /*#__PURE__*/_react.default.isValidElement(filedChildren)) return filedChildren;
  var finalChange = fieldProps ? undefined : function () {
    var _filedChildren$props12, _filedChildren$props13;

    for (var _len3 = arguments.length, restParams = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      restParams[_key3] = arguments[_key3];
    }

    _onChange === null || _onChange === void 0 ? void 0 : _onChange.apply(void 0, restParams);
    filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props12 = filedChildren.props) === null || _filedChildren$props12 === void 0 ? void 0 : (_filedChildren$props13 = _filedChildren$props12.onChange) === null || _filedChildren$props13 === void 0 ? void 0 : _filedChildren$props13.call.apply(_filedChildren$props13, [_filedChildren$props12].concat(restParams));
  };
  return /*#__PURE__*/_react.default.cloneElement(filedChildren, (0, _proUtils.omitUndefined)((0, _objectSpread3.default)((0, _objectSpread3.default)((0, _objectSpread3.default)({}, restProps), {}, {
    value: value
  }, filedChildren.props), {}, {
    onChange: finalChange,
    fieldProps: fieldProps
  })));
};
/**
 * 支持了一下前置 dom 和后置的 dom 同时包一个provide
 *
 * @param WarpFormItemProps
 * @returns
 */


var WarpFormItem = function WarpFormItem(_ref) {
  var children = _ref.children,
      addonAfter = _ref.addonAfter,
      addonBefore = _ref.addonBefore,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
  var formDom = (0, _react.useMemo)(function () {
    if (!addonAfter && !addonBefore) return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, props, children);
    return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, (0, _extends2.default)({
      // @ts-ignore
      _internalItemRender: {
        mark: 'pro_table_render',
        render: function render(inputProps, doms) {
          return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
            style: {
              display: 'flex',
              alignItems: 'center'
            }
          }, addonBefore ? /*#__PURE__*/_react.default.createElement("div", {
            style: {
              marginRight: 8
            }
          }, addonBefore) : null, /*#__PURE__*/_react.default.createElement("div", {
            style: {
              flex: 1
            }
          }, doms.input), addonAfter ? /*#__PURE__*/_react.default.createElement("div", {
            style: {
              marginLeft: 8
            }
          }, addonAfter) : null), doms.extra, doms.errorList);
        }
      }
    }, props), children);
  }, [addonAfter, addonBefore, children, props]);
  return /*#__PURE__*/_react.default.createElement(FormItemProvide.Provider, {
    value: {
      name: props.name,
      label: props.label
    }
  }, formDom);
};

var ProFormItem = function ProFormItem(props) {
  var _rest$name, _rest$name2;

  /** 从 context 中拿到的值 */
  var size = (0, _react.useContext)(_antd.ConfigProvider.SizeContext);
  var valueType = props.valueType,
      transform = props.transform,
      dataFormat = props.dataFormat,
      ignoreFormItem = props.ignoreFormItem,
      _props$lightProps = props.lightProps,
      lightProps = _props$lightProps === void 0 ? {} : _props$lightProps,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded3);
  var formListField = (0, _react.useContext)(_List.FormListContext); // ProFromList 的 filed，里面有name和key

  /** 从 context 中拿到的值 */

  var name = (0, _react.useMemo)(function () {
    if (formListField.name !== undefined) {
      return [formListField.name, props.name].flat(1);
    }

    return props.name;
  }, [formListField.name, props.name]);
  /** 从 context 中拿到的值 */

  var _React$useContext = _react.default.useContext(_FieldContext.default),
      setFieldValueType = _React$useContext.setFieldValueType,
      formItemProps = _React$useContext.formItemProps;

  (0, _react.useEffect)(function () {
    // 如果 setFieldValueType 和 props.name 不存在不存入
    if (!setFieldValueType || !props.name) {
      return;
    } // Field.type === 'ProField' 时 props 里面是有 valueType 的，所以要设置一下
    // 写一个 ts 比较麻烦，用 any 顶一下


    setFieldValueType([formListField.listName, name].flat(1).filter(function (itemName) {
      return itemName !== undefined;
    }), {
      valueType: valueType || 'text',
      dateFormat: dataFormat,
      transform: transform
    });
  }, [formListField.listName, name, dataFormat, props.name, setFieldValueType, transform, valueType]);
  var isDropdown = /*#__PURE__*/_react.default.isValidElement(props.children) && (0, _proUtils.isDropdownValueType)(valueType || props.children.props.valueType);
  var noLightFormItem = (0, _react.useMemo)(function () {
    if (!lightProps.light || lightProps.customLightMode || isDropdown) {
      return true;
    }

    return false;
  }, [lightProps.customLightMode, isDropdown, lightProps.light]);

  if (typeof props.children === 'function') {
    return /*#__PURE__*/_react.default.createElement(WarpFormItem, (0, _extends2.default)({}, rest, {
      name: name
    }), props.children);
  } // formItem 支持function，如果是function 我就直接不管了


  var children = /*#__PURE__*/_react.default.createElement(WithValueFomFiledProps, {
    key: (_rest$name = rest.name) === null || _rest$name === void 0 ? void 0 : _rest$name.toString(),
    valuePropName: props.valuePropName
  }, props.children);

  var lightDom = noLightFormItem ? children : /*#__PURE__*/_react.default.createElement(_LightWrapper.default, (0, _extends2.default)({}, lightProps, {
    key: (_rest$name2 = rest.name) === null || _rest$name2 === void 0 ? void 0 : _rest$name2.toString(),
    size: size
  }), children); // 这里控制是否需要 LightWrapper，为了提升一点点性能

  if (ignoreFormItem) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, lightDom);
  }

  return /*#__PURE__*/_react.default.createElement(WarpFormItem, (0, _extends2.default)({}, formItemProps, rest, {
    name: name
  }), lightDom);
};

var _default = ProFormItem;
exports.default = _default;