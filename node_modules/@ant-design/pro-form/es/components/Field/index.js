import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["fieldProps", "children", "labelCol", "label", "autoFocus", "isDefaultDom", "render", "proFieldProps", "renderFormItem", "valueType", "initialValue", "onChange", "valueEnum", "params", "name", "valuePropName"];

/* eslint-disable @typescript-eslint/ban-types */
import React, { useImperativeHandle } from 'react';
import ProField from '@ant-design/pro-field';
import { runFunction } from '@ant-design/pro-utils';
import createField from '../../BaseForm/createField';
import ProFormDependency from '../Dependency';
/**
 * 最普通的 Text 组件
 *
 * @param
 */

var ProFormField = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var fieldProps = props.fieldProps,
      children = props.children,
      labelCol = props.labelCol,
      label = props.label,
      autoFocus = props.autoFocus,
      isDefaultDom = props.isDefaultDom,
      render = props.render,
      proFieldProps = props.proFieldProps,
      renderFormItem = props.renderFormItem,
      valueType = props.valueType,
      initialValue = props.initialValue,
      _onChange = props.onChange,
      valueEnum = props.valueEnum,
      params = props.params,
      name = props.name,
      _props$valuePropName = props.valuePropName,
      valuePropName = _props$valuePropName === void 0 ? 'value' : _props$valuePropName,
      restProps = _objectWithoutProperties(props, _excluded);

  useImperativeHandle(ref, function () {
    return {};
  }); // 防止 formItem 的值被吃掉

  if (children) {
    if ( /*#__PURE__*/React.isValidElement(children)) {
      return /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, restProps), {}, {
        onChange: function onChange() {
          for (var _len = arguments.length, restParams = new Array(_len), _key = 0; _key < _len; _key++) {
            restParams[_key] = arguments[_key];
          }

          if (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.onChange) {
            var _fieldProps$onChange;

            fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange = fieldProps.onChange) === null || _fieldProps$onChange === void 0 ? void 0 : _fieldProps$onChange.call.apply(_fieldProps$onChange, [fieldProps].concat(restParams));
            return;
          }

          _onChange === null || _onChange === void 0 ? void 0 : _onChange.apply(void 0, restParams);
        }
      }, children.props));
    }

    return children;
  }

  var renderDom = function renderDom(values) {
    var propsParams = values ? _objectSpread(_objectSpread({}, params), values || {}) : params;
    return /*#__PURE__*/React.createElement(ProField, _extends({
      valuePropName: valuePropName,
      text: fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps[valuePropName],
      render: render,
      renderFormItem: renderFormItem,
      valueType: valueType || 'text',
      fieldProps: _objectSpread(_objectSpread({
        autoFocus: autoFocus
      }, fieldProps), {}, {
        onChange: function onChange() {
          for (var _len2 = arguments.length, restParams = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            restParams[_key2] = arguments[_key2];
          }

          if (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.onChange) {
            var _fieldProps$onChange2;

            fieldProps === null || fieldProps === void 0 ? void 0 : (_fieldProps$onChange2 = fieldProps.onChange) === null || _fieldProps$onChange2 === void 0 ? void 0 : _fieldProps$onChange2.call.apply(_fieldProps$onChange2, [fieldProps].concat(restParams));
            return;
          }

          _onChange === null || _onChange === void 0 ? void 0 : _onChange.apply(void 0, restParams);
        }
      }),
      valueEnum: runFunction(valueEnum)
    }, proFieldProps, restProps, {
      mode: (proFieldProps === null || proFieldProps === void 0 ? void 0 : proFieldProps.mode) || 'edit',
      params: propsParams
    }));
  };

  if (restProps.dependencies && restProps.request) {
    return /*#__PURE__*/React.createElement(ProFormDependency, {
      name: restProps.dependencies
    }, function (values) {
      return renderDom(values);
    });
  }

  return renderDom();
});
export default createField(ProFormField);